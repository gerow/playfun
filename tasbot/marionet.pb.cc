// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marionet.proto

#include "marionet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr MarkovInput::MarkovInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MarkovInputDefaultTypeInternal {
  constexpr MarkovInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarkovInputDefaultTypeInternal() {}
  union {
    MarkovInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarkovInputDefaultTypeInternal _MarkovInput_default_instance_;
constexpr FutureProto::FutureProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FutureProtoDefaultTypeInternal {
  constexpr FutureProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FutureProtoDefaultTypeInternal() {}
  union {
    FutureProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FutureProtoDefaultTypeInternal _FutureProto_default_instance_;
constexpr PlayFunRequest::PlayFunRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : futures_()
  , current_state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , next_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PlayFunRequestDefaultTypeInternal {
  constexpr PlayFunRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayFunRequestDefaultTypeInternal() {}
  union {
    PlayFunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayFunRequestDefaultTypeInternal _PlayFunRequest_default_instance_;
constexpr PlayFunResponse::PlayFunResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : futurescores_()
  , immediate_score_(0)
  , best_future_score_(0)
  , worst_future_score_(0)
  , futures_score_(0){}
struct PlayFunResponseDefaultTypeInternal {
  constexpr PlayFunResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayFunResponseDefaultTypeInternal() {}
  union {
    PlayFunResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayFunResponseDefaultTypeInternal _PlayFunResponse_default_instance_;
constexpr TryImproveRequest::TryImproveRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , improveme_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , end_state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seed_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , end_integral_(0)
  , approach_(0)

  , iters_(0)
  , maxbest_(0){}
struct TryImproveRequestDefaultTypeInternal {
  constexpr TryImproveRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TryImproveRequestDefaultTypeInternal() {}
  union {
    TryImproveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TryImproveRequestDefaultTypeInternal _TryImproveRequest_default_instance_;
constexpr TryImproveResponse::TryImproveResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_()
  , score_()
  , iters_tried_(0)
  , iters_better_(0){}
struct TryImproveResponseDefaultTypeInternal {
  constexpr TryImproveResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TryImproveResponseDefaultTypeInternal() {}
  union {
    TryImproveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TryImproveResponseDefaultTypeInternal _TryImproveResponse_default_instance_;
constexpr HelperRequest::HelperRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playfun_(nullptr)
  , tryimprove_(nullptr){}
struct HelperRequestDefaultTypeInternal {
  constexpr HelperRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HelperRequestDefaultTypeInternal() {}
  union {
    HelperRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HelperRequestDefaultTypeInternal _HelperRequest_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_marionet_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_marionet_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_marionet_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_marionet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MarkovInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FutureProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FutureProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FutureProto, inputs_),
  0,
  PROTOBUF_FIELD_OFFSET(::PlayFunRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayFunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayFunRequest, current_state_),
  PROTOBUF_FIELD_OFFSET(::PlayFunRequest, next_),
  PROTOBUF_FIELD_OFFSET(::PlayFunRequest, futures_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PlayFunResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayFunResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayFunResponse, immediate_score_),
  PROTOBUF_FIELD_OFFSET(::PlayFunResponse, best_future_score_),
  PROTOBUF_FIELD_OFFSET(::PlayFunResponse, worst_future_score_),
  PROTOBUF_FIELD_OFFSET(::PlayFunResponse, futures_score_),
  PROTOBUF_FIELD_OFFSET(::PlayFunResponse, futurescores_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TryImproveRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TryImproveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TryImproveRequest, start_state_),
  PROTOBUF_FIELD_OFFSET(::TryImproveRequest, improveme_),
  PROTOBUF_FIELD_OFFSET(::TryImproveRequest, end_state_),
  PROTOBUF_FIELD_OFFSET(::TryImproveRequest, end_integral_),
  PROTOBUF_FIELD_OFFSET(::TryImproveRequest, approach_),
  PROTOBUF_FIELD_OFFSET(::TryImproveRequest, seed_),
  PROTOBUF_FIELD_OFFSET(::TryImproveRequest, iters_),
  PROTOBUF_FIELD_OFFSET(::TryImproveRequest, maxbest_),
  0,
  1,
  2,
  4,
  5,
  3,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TryImproveResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TryImproveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TryImproveResponse, inputs_),
  PROTOBUF_FIELD_OFFSET(::TryImproveResponse, score_),
  PROTOBUF_FIELD_OFFSET(::TryImproveResponse, iters_tried_),
  PROTOBUF_FIELD_OFFSET(::TryImproveResponse, iters_better_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HelperRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HelperRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HelperRequest, playfun_),
  PROTOBUF_FIELD_OFFSET(::HelperRequest, tryimprove_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MarkovInput)},
  { 5, 11, sizeof(::FutureProto)},
  { 12, 20, sizeof(::PlayFunRequest)},
  { 23, 33, sizeof(::PlayFunResponse)},
  { 38, 51, sizeof(::TryImproveRequest)},
  { 59, 68, sizeof(::TryImproveResponse)},
  { 72, 79, sizeof(::HelperRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MarkovInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FutureProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayFunRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayFunResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TryImproveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TryImproveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HelperRequest_default_instance_),
};

const char descriptor_table_protodef_marionet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016marionet.proto\"\r\n\013MarkovInput\"\035\n\013Futur"
  "eProto\022\016\n\006inputs\030\004 \001(\014\"T\n\016PlayFunRequest"
  "\022\025\n\rcurrent_state\030\001 \001(\014\022\014\n\004next\030\002 \001(\014\022\035\n"
  "\007futures\030\003 \003(\0132\014.FutureProto\"\216\001\n\017PlayFun"
  "Response\022\027\n\017immediate_score\030\001 \001(\001\022\031\n\021bes"
  "t_future_score\030\002 \001(\001\022\032\n\022worst_future_sco"
  "re\030\003 \001(\001\022\025\n\rfutures_score\030\004 \001(\001\022\024\n\014futur"
  "escores\030\005 \003(\001\"\200\002\n\021TryImproveRequest\022\023\n\013s"
  "tart_state\030\001 \001(\014\022\021\n\timproveme\030\002 \001(\014\022\021\n\te"
  "nd_state\030\003 \001(\014\022\024\n\014end_integral\030\004 \001(\001\022-\n\010"
  "approach\030\005 \001(\0162\033.TryImproveRequest.Appro"
  "ach\022\014\n\004seed\030\006 \001(\t\022\r\n\005iters\030\007 \001(\005\022\017\n\007maxb"
  "est\030\010 \001(\005\"=\n\010Approach\022\n\n\006RANDOM\020\000\022\r\n\tOPP"
  "OSITES\020\001\022\014\n\010ABLATION\020\002\022\010\n\004CHOP\020\003\"^\n\022TryI"
  "mproveResponse\022\016\n\006inputs\030\001 \003(\014\022\r\n\005score\030"
  "\002 \003(\001\022\023\n\013iters_tried\030\003 \001(\005\022\024\n\014iters_bett"
  "er\030\004 \001(\005\"Y\n\rHelperRequest\022 \n\007playfun\030\001 \001"
  "(\0132\017.PlayFunRequest\022&\n\ntryimprove\030\002 \001(\0132"
  "\022.TryImproveRequest"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_marionet_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_marionet_2eproto = {
  false, false, 739, descriptor_table_protodef_marionet_2eproto, "marionet.proto", 
  &descriptor_table_marionet_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_marionet_2eproto::offsets,
  file_level_metadata_marionet_2eproto, file_level_enum_descriptors_marionet_2eproto, file_level_service_descriptors_marionet_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_marionet_2eproto_getter() {
  return &descriptor_table_marionet_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_marionet_2eproto(&descriptor_table_marionet_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TryImproveRequest_Approach_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_marionet_2eproto);
  return file_level_enum_descriptors_marionet_2eproto[0];
}
bool TryImproveRequest_Approach_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TryImproveRequest_Approach TryImproveRequest::RANDOM;
constexpr TryImproveRequest_Approach TryImproveRequest::OPPOSITES;
constexpr TryImproveRequest_Approach TryImproveRequest::ABLATION;
constexpr TryImproveRequest_Approach TryImproveRequest::CHOP;
constexpr TryImproveRequest_Approach TryImproveRequest::Approach_MIN;
constexpr TryImproveRequest_Approach TryImproveRequest::Approach_MAX;
constexpr int TryImproveRequest::Approach_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class MarkovInput::_Internal {
 public:
};

MarkovInput::MarkovInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MarkovInput)
}
MarkovInput::MarkovInput(const MarkovInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MarkovInput)
}

inline void MarkovInput::SharedCtor() {
}

MarkovInput::~MarkovInput() {
  // @@protoc_insertion_point(destructor:MarkovInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MarkovInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MarkovInput::ArenaDtor(void* object) {
  MarkovInput* _this = reinterpret_cast< MarkovInput* >(object);
  (void)_this;
}
void MarkovInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarkovInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarkovInput::Clear() {
// @@protoc_insertion_point(message_clear_start:MarkovInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarkovInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarkovInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MarkovInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MarkovInput)
  return target;
}

size_t MarkovInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MarkovInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarkovInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MarkovInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarkovInput::GetClassData() const { return &_class_data_; }

void MarkovInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MarkovInput *>(to)->MergeFrom(
      static_cast<const MarkovInput &>(from));
}


void MarkovInput::MergeFrom(const MarkovInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MarkovInput)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarkovInput::CopyFrom(const MarkovInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MarkovInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkovInput::IsInitialized() const {
  return true;
}

void MarkovInput::InternalSwap(MarkovInput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarkovInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_marionet_2eproto_getter, &descriptor_table_marionet_2eproto_once,
      file_level_metadata_marionet_2eproto[0]);
}

// ===================================================================

class FutureProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FutureProto>()._has_bits_);
  static void set_has_inputs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FutureProto::FutureProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FutureProto)
}
FutureProto::FutureProto(const FutureProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  inputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inputs()) {
    inputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_inputs(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:FutureProto)
}

inline void FutureProto::SharedCtor() {
inputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FutureProto::~FutureProto() {
  // @@protoc_insertion_point(destructor:FutureProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FutureProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  inputs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FutureProto::ArenaDtor(void* object) {
  FutureProto* _this = reinterpret_cast< FutureProto* >(object);
  (void)_this;
}
void FutureProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FutureProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FutureProto::Clear() {
// @@protoc_insertion_point(message_clear_start:FutureProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    inputs_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FutureProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes inputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_inputs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FutureProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FutureProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes inputs = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_inputs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FutureProto)
  return target;
}

size_t FutureProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FutureProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes inputs = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_inputs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FutureProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FutureProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FutureProto::GetClassData() const { return &_class_data_; }

void FutureProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FutureProto *>(to)->MergeFrom(
      static_cast<const FutureProto &>(from));
}


void FutureProto::MergeFrom(const FutureProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FutureProto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_inputs()) {
    _internal_set_inputs(from._internal_inputs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FutureProto::CopyFrom(const FutureProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FutureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureProto::IsInitialized() const {
  return true;
}

void FutureProto::InternalSwap(FutureProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &inputs_, GetArenaForAllocation(),
      &other->inputs_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FutureProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_marionet_2eproto_getter, &descriptor_table_marionet_2eproto_once,
      file_level_metadata_marionet_2eproto[1]);
}

// ===================================================================

class PlayFunRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayFunRequest>()._has_bits_);
  static void set_has_current_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_next(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PlayFunRequest::PlayFunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  futures_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PlayFunRequest)
}
PlayFunRequest::PlayFunRequest(const PlayFunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      futures_(from.futures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_current_state()) {
    current_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_current_state(), 
      GetArenaForAllocation());
  }
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_next()) {
    next_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PlayFunRequest)
}

inline void PlayFunRequest::SharedCtor() {
current_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PlayFunRequest::~PlayFunRequest() {
  // @@protoc_insertion_point(destructor:PlayFunRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayFunRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  current_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayFunRequest::ArenaDtor(void* object) {
  PlayFunRequest* _this = reinterpret_cast< PlayFunRequest* >(object);
  (void)_this;
}
void PlayFunRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayFunRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayFunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayFunRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  futures_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      current_state_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      next_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayFunRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes current_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_current_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes next = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_next();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .FutureProto futures = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_futures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayFunRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayFunRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes current_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_current_state(), target);
  }

  // optional bytes next = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_next(), target);
  }

  // repeated .FutureProto futures = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_futures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_futures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayFunRequest)
  return target;
}

size_t PlayFunRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayFunRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FutureProto futures = 3;
  total_size += 1UL * this->_internal_futures_size();
  for (const auto& msg : this->futures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes current_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_current_state());
    }

    // optional bytes next = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_next());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayFunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayFunRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayFunRequest::GetClassData() const { return &_class_data_; }

void PlayFunRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PlayFunRequest *>(to)->MergeFrom(
      static_cast<const PlayFunRequest &>(from));
}


void PlayFunRequest::MergeFrom(const PlayFunRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayFunRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  futures_.MergeFrom(from.futures_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_current_state(from._internal_current_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_next(from._internal_next());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayFunRequest::CopyFrom(const PlayFunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayFunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayFunRequest::IsInitialized() const {
  return true;
}

void PlayFunRequest::InternalSwap(PlayFunRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  futures_.InternalSwap(&other->futures_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &current_state_, GetArenaForAllocation(),
      &other->current_state_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_, GetArenaForAllocation(),
      &other->next_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayFunRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_marionet_2eproto_getter, &descriptor_table_marionet_2eproto_once,
      file_level_metadata_marionet_2eproto[2]);
}

// ===================================================================

class PlayFunResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayFunResponse>()._has_bits_);
  static void set_has_immediate_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_best_future_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_worst_future_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_futures_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PlayFunResponse::PlayFunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  futurescores_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PlayFunResponse)
}
PlayFunResponse::PlayFunResponse(const PlayFunResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      futurescores_(from.futurescores_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&immediate_score_, &from.immediate_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&futures_score_) -
    reinterpret_cast<char*>(&immediate_score_)) + sizeof(futures_score_));
  // @@protoc_insertion_point(copy_constructor:PlayFunResponse)
}

inline void PlayFunResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&immediate_score_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&futures_score_) -
    reinterpret_cast<char*>(&immediate_score_)) + sizeof(futures_score_));
}

PlayFunResponse::~PlayFunResponse() {
  // @@protoc_insertion_point(destructor:PlayFunResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayFunResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayFunResponse::ArenaDtor(void* object) {
  PlayFunResponse* _this = reinterpret_cast< PlayFunResponse* >(object);
  (void)_this;
}
void PlayFunResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayFunResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayFunResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayFunResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  futurescores_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&immediate_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&futures_score_) -
        reinterpret_cast<char*>(&immediate_score_)) + sizeof(futures_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayFunResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double immediate_score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_immediate_score(&has_bits);
          immediate_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double best_future_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_best_future_score(&has_bits);
          best_future_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double worst_future_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_worst_future_score(&has_bits);
          worst_future_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double futures_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_futures_score(&has_bits);
          futures_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double futurescores = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_futurescores(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_futurescores(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayFunResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayFunResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double immediate_score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_immediate_score(), target);
  }

  // optional double best_future_score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_best_future_score(), target);
  }

  // optional double worst_future_score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_worst_future_score(), target);
  }

  // optional double futures_score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_futures_score(), target);
  }

  // repeated double futurescores = 5;
  for (int i = 0, n = this->_internal_futurescores_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_futurescores(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayFunResponse)
  return target;
}

size_t PlayFunResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayFunResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double futurescores = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_futurescores_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_futurescores_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double immediate_score = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double best_future_score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double worst_future_score = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double futures_score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayFunResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayFunResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayFunResponse::GetClassData() const { return &_class_data_; }

void PlayFunResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PlayFunResponse *>(to)->MergeFrom(
      static_cast<const PlayFunResponse &>(from));
}


void PlayFunResponse::MergeFrom(const PlayFunResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayFunResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  futurescores_.MergeFrom(from.futurescores_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      immediate_score_ = from.immediate_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      best_future_score_ = from.best_future_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      worst_future_score_ = from.worst_future_score_;
    }
    if (cached_has_bits & 0x00000008u) {
      futures_score_ = from.futures_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayFunResponse::CopyFrom(const PlayFunResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayFunResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayFunResponse::IsInitialized() const {
  return true;
}

void PlayFunResponse::InternalSwap(PlayFunResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  futurescores_.InternalSwap(&other->futurescores_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayFunResponse, futures_score_)
      + sizeof(PlayFunResponse::futures_score_)
      - PROTOBUF_FIELD_OFFSET(PlayFunResponse, immediate_score_)>(
          reinterpret_cast<char*>(&immediate_score_),
          reinterpret_cast<char*>(&other->immediate_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayFunResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_marionet_2eproto_getter, &descriptor_table_marionet_2eproto_once,
      file_level_metadata_marionet_2eproto[3]);
}

// ===================================================================

class TryImproveRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TryImproveRequest>()._has_bits_);
  static void set_has_start_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_improveme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_integral(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_approach(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_iters(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_maxbest(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

TryImproveRequest::TryImproveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TryImproveRequest)
}
TryImproveRequest::TryImproveRequest(const TryImproveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_start_state()) {
    start_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_state(), 
      GetArenaForAllocation());
  }
  improveme_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_improveme()) {
    improveme_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_improveme(), 
      GetArenaForAllocation());
  }
  end_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_end_state()) {
    end_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_end_state(), 
      GetArenaForAllocation());
  }
  seed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_seed()) {
    seed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_seed(), 
      GetArenaForAllocation());
  }
  ::memcpy(&end_integral_, &from.end_integral_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxbest_) -
    reinterpret_cast<char*>(&end_integral_)) + sizeof(maxbest_));
  // @@protoc_insertion_point(copy_constructor:TryImproveRequest)
}

inline void TryImproveRequest::SharedCtor() {
start_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
improveme_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
end_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
seed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&end_integral_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxbest_) -
    reinterpret_cast<char*>(&end_integral_)) + sizeof(maxbest_));
}

TryImproveRequest::~TryImproveRequest() {
  // @@protoc_insertion_point(destructor:TryImproveRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TryImproveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  start_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  improveme_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TryImproveRequest::ArenaDtor(void* object) {
  TryImproveRequest* _this = reinterpret_cast< TryImproveRequest* >(object);
  (void)_this;
}
void TryImproveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TryImproveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TryImproveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TryImproveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      start_state_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      improveme_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      end_state_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      seed_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&end_integral_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxbest_) -
        reinterpret_cast<char*>(&end_integral_)) + sizeof(maxbest_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TryImproveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes start_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes improveme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_improveme();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes end_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_end_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double end_integral = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_end_integral(&has_bits);
          end_integral_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .TryImproveRequest.Approach approach = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TryImproveRequest_Approach_IsValid(val))) {
            _internal_set_approach(static_cast<::TryImproveRequest_Approach>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string seed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_seed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TryImproveRequest.seed");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 iters = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_iters(&has_bits);
          iters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maxbest = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_maxbest(&has_bits);
          maxbest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TryImproveRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TryImproveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes start_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_start_state(), target);
  }

  // optional bytes improveme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_improveme(), target);
  }

  // optional bytes end_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_end_state(), target);
  }

  // optional double end_integral = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_end_integral(), target);
  }

  // optional .TryImproveRequest.Approach approach = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_approach(), target);
  }

  // optional string seed = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_seed().data(), static_cast<int>(this->_internal_seed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TryImproveRequest.seed");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_seed(), target);
  }

  // optional int32 iters = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_iters(), target);
  }

  // optional int32 maxbest = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_maxbest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TryImproveRequest)
  return target;
}

size_t TryImproveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TryImproveRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes start_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_start_state());
    }

    // optional bytes improveme = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_improveme());
    }

    // optional bytes end_state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_end_state());
    }

    // optional string seed = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_seed());
    }

    // optional double end_integral = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .TryImproveRequest.Approach approach = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_approach());
    }

    // optional int32 iters = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_iters());
    }

    // optional int32 maxbest = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_maxbest());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TryImproveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TryImproveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TryImproveRequest::GetClassData() const { return &_class_data_; }

void TryImproveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TryImproveRequest *>(to)->MergeFrom(
      static_cast<const TryImproveRequest &>(from));
}


void TryImproveRequest::MergeFrom(const TryImproveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TryImproveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_start_state(from._internal_start_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_improveme(from._internal_improveme());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_end_state(from._internal_end_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_seed(from._internal_seed());
    }
    if (cached_has_bits & 0x00000010u) {
      end_integral_ = from.end_integral_;
    }
    if (cached_has_bits & 0x00000020u) {
      approach_ = from.approach_;
    }
    if (cached_has_bits & 0x00000040u) {
      iters_ = from.iters_;
    }
    if (cached_has_bits & 0x00000080u) {
      maxbest_ = from.maxbest_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TryImproveRequest::CopyFrom(const TryImproveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TryImproveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryImproveRequest::IsInitialized() const {
  return true;
}

void TryImproveRequest::InternalSwap(TryImproveRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_state_, GetArenaForAllocation(),
      &other->start_state_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &improveme_, GetArenaForAllocation(),
      &other->improveme_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &end_state_, GetArenaForAllocation(),
      &other->end_state_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &seed_, GetArenaForAllocation(),
      &other->seed_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TryImproveRequest, maxbest_)
      + sizeof(TryImproveRequest::maxbest_)
      - PROTOBUF_FIELD_OFFSET(TryImproveRequest, end_integral_)>(
          reinterpret_cast<char*>(&end_integral_),
          reinterpret_cast<char*>(&other->end_integral_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TryImproveRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_marionet_2eproto_getter, &descriptor_table_marionet_2eproto_once,
      file_level_metadata_marionet_2eproto[4]);
}

// ===================================================================

class TryImproveResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TryImproveResponse>()._has_bits_);
  static void set_has_iters_tried(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_iters_better(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TryImproveResponse::TryImproveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  inputs_(arena),
  score_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TryImproveResponse)
}
TryImproveResponse::TryImproveResponse(const TryImproveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      inputs_(from.inputs_),
      score_(from.score_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iters_tried_, &from.iters_tried_,
    static_cast<size_t>(reinterpret_cast<char*>(&iters_better_) -
    reinterpret_cast<char*>(&iters_tried_)) + sizeof(iters_better_));
  // @@protoc_insertion_point(copy_constructor:TryImproveResponse)
}

inline void TryImproveResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iters_tried_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iters_better_) -
    reinterpret_cast<char*>(&iters_tried_)) + sizeof(iters_better_));
}

TryImproveResponse::~TryImproveResponse() {
  // @@protoc_insertion_point(destructor:TryImproveResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TryImproveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TryImproveResponse::ArenaDtor(void* object) {
  TryImproveResponse* _this = reinterpret_cast< TryImproveResponse* >(object);
  (void)_this;
}
void TryImproveResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TryImproveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TryImproveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:TryImproveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  score_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&iters_tried_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&iters_better_) -
        reinterpret_cast<char*>(&iters_tried_)) + sizeof(iters_better_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TryImproveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inputs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated double score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_score(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_score(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 iters_tried = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_iters_tried(&has_bits);
          iters_tried_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 iters_better = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_iters_better(&has_bits);
          iters_better_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TryImproveResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TryImproveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes inputs = 1;
  for (int i = 0, n = this->_internal_inputs_size(); i < n; i++) {
    const auto& s = this->_internal_inputs(i);
    target = stream->WriteBytes(1, s, target);
  }

  // repeated double score = 2;
  for (int i = 0, n = this->_internal_score_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_score(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 iters_tried = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_iters_tried(), target);
  }

  // optional int32 iters_better = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_iters_better(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TryImproveResponse)
  return target;
}

size_t TryImproveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TryImproveResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes inputs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(inputs_.size());
  for (int i = 0, n = inputs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      inputs_.Get(i));
  }

  // repeated double score = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_score_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_score_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 iters_tried = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_iters_tried());
    }

    // optional int32 iters_better = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_iters_better());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TryImproveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TryImproveResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TryImproveResponse::GetClassData() const { return &_class_data_; }

void TryImproveResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TryImproveResponse *>(to)->MergeFrom(
      static_cast<const TryImproveResponse &>(from));
}


void TryImproveResponse::MergeFrom(const TryImproveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TryImproveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  score_.MergeFrom(from.score_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      iters_tried_ = from.iters_tried_;
    }
    if (cached_has_bits & 0x00000002u) {
      iters_better_ = from.iters_better_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TryImproveResponse::CopyFrom(const TryImproveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TryImproveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryImproveResponse::IsInitialized() const {
  return true;
}

void TryImproveResponse::InternalSwap(TryImproveResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  inputs_.InternalSwap(&other->inputs_);
  score_.InternalSwap(&other->score_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TryImproveResponse, iters_better_)
      + sizeof(TryImproveResponse::iters_better_)
      - PROTOBUF_FIELD_OFFSET(TryImproveResponse, iters_tried_)>(
          reinterpret_cast<char*>(&iters_tried_),
          reinterpret_cast<char*>(&other->iters_tried_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TryImproveResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_marionet_2eproto_getter, &descriptor_table_marionet_2eproto_once,
      file_level_metadata_marionet_2eproto[5]);
}

// ===================================================================

class HelperRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<HelperRequest>()._has_bits_);
  static const ::PlayFunRequest& playfun(const HelperRequest* msg);
  static void set_has_playfun(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TryImproveRequest& tryimprove(const HelperRequest* msg);
  static void set_has_tryimprove(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PlayFunRequest&
HelperRequest::_Internal::playfun(const HelperRequest* msg) {
  return *msg->playfun_;
}
const ::TryImproveRequest&
HelperRequest::_Internal::tryimprove(const HelperRequest* msg) {
  return *msg->tryimprove_;
}
HelperRequest::HelperRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HelperRequest)
}
HelperRequest::HelperRequest(const HelperRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playfun()) {
    playfun_ = new ::PlayFunRequest(*from.playfun_);
  } else {
    playfun_ = nullptr;
  }
  if (from._internal_has_tryimprove()) {
    tryimprove_ = new ::TryImproveRequest(*from.tryimprove_);
  } else {
    tryimprove_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:HelperRequest)
}

inline void HelperRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playfun_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tryimprove_) -
    reinterpret_cast<char*>(&playfun_)) + sizeof(tryimprove_));
}

HelperRequest::~HelperRequest() {
  // @@protoc_insertion_point(destructor:HelperRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HelperRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete playfun_;
  if (this != internal_default_instance()) delete tryimprove_;
}

void HelperRequest::ArenaDtor(void* object) {
  HelperRequest* _this = reinterpret_cast< HelperRequest* >(object);
  (void)_this;
}
void HelperRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HelperRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HelperRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HelperRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(playfun_ != nullptr);
      playfun_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tryimprove_ != nullptr);
      tryimprove_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelperRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .PlayFunRequest playfun = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playfun(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TryImproveRequest tryimprove = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tryimprove(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HelperRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HelperRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PlayFunRequest playfun = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playfun(this), target, stream);
  }

  // optional .TryImproveRequest tryimprove = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tryimprove(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HelperRequest)
  return target;
}

size_t HelperRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HelperRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .PlayFunRequest playfun = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *playfun_);
    }

    // optional .TryImproveRequest tryimprove = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tryimprove_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelperRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HelperRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelperRequest::GetClassData() const { return &_class_data_; }

void HelperRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HelperRequest *>(to)->MergeFrom(
      static_cast<const HelperRequest &>(from));
}


void HelperRequest::MergeFrom(const HelperRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HelperRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_playfun()->::PlayFunRequest::MergeFrom(from._internal_playfun());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tryimprove()->::TryImproveRequest::MergeFrom(from._internal_tryimprove());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelperRequest::CopyFrom(const HelperRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HelperRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelperRequest::IsInitialized() const {
  return true;
}

void HelperRequest::InternalSwap(HelperRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HelperRequest, tryimprove_)
      + sizeof(HelperRequest::tryimprove_)
      - PROTOBUF_FIELD_OFFSET(HelperRequest, playfun_)>(
          reinterpret_cast<char*>(&playfun_),
          reinterpret_cast<char*>(&other->playfun_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HelperRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_marionet_2eproto_getter, &descriptor_table_marionet_2eproto_once,
      file_level_metadata_marionet_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MarkovInput* Arena::CreateMaybeMessage< ::MarkovInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MarkovInput >(arena);
}
template<> PROTOBUF_NOINLINE ::FutureProto* Arena::CreateMaybeMessage< ::FutureProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FutureProto >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayFunRequest* Arena::CreateMaybeMessage< ::PlayFunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayFunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayFunResponse* Arena::CreateMaybeMessage< ::PlayFunResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayFunResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::TryImproveRequest* Arena::CreateMaybeMessage< ::TryImproveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TryImproveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::TryImproveResponse* Arena::CreateMaybeMessage< ::TryImproveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TryImproveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HelperRequest* Arena::CreateMaybeMessage< ::HelperRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HelperRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
