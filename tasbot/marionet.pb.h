// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marionet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_marionet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_marionet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_marionet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_marionet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_marionet_2eproto;
class FutureProto;
struct FutureProtoDefaultTypeInternal;
extern FutureProtoDefaultTypeInternal _FutureProto_default_instance_;
class HelperRequest;
struct HelperRequestDefaultTypeInternal;
extern HelperRequestDefaultTypeInternal _HelperRequest_default_instance_;
class MarkovInput;
struct MarkovInputDefaultTypeInternal;
extern MarkovInputDefaultTypeInternal _MarkovInput_default_instance_;
class PlayFunRequest;
struct PlayFunRequestDefaultTypeInternal;
extern PlayFunRequestDefaultTypeInternal _PlayFunRequest_default_instance_;
class PlayFunResponse;
struct PlayFunResponseDefaultTypeInternal;
extern PlayFunResponseDefaultTypeInternal _PlayFunResponse_default_instance_;
class TryImproveRequest;
struct TryImproveRequestDefaultTypeInternal;
extern TryImproveRequestDefaultTypeInternal _TryImproveRequest_default_instance_;
class TryImproveResponse;
struct TryImproveResponseDefaultTypeInternal;
extern TryImproveResponseDefaultTypeInternal _TryImproveResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FutureProto* Arena::CreateMaybeMessage<::FutureProto>(Arena*);
template<> ::HelperRequest* Arena::CreateMaybeMessage<::HelperRequest>(Arena*);
template<> ::MarkovInput* Arena::CreateMaybeMessage<::MarkovInput>(Arena*);
template<> ::PlayFunRequest* Arena::CreateMaybeMessage<::PlayFunRequest>(Arena*);
template<> ::PlayFunResponse* Arena::CreateMaybeMessage<::PlayFunResponse>(Arena*);
template<> ::TryImproveRequest* Arena::CreateMaybeMessage<::TryImproveRequest>(Arena*);
template<> ::TryImproveResponse* Arena::CreateMaybeMessage<::TryImproveResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum TryImproveRequest_Approach : int {
  TryImproveRequest_Approach_RANDOM = 0,
  TryImproveRequest_Approach_OPPOSITES = 1,
  TryImproveRequest_Approach_ABLATION = 2,
  TryImproveRequest_Approach_CHOP = 3
};
bool TryImproveRequest_Approach_IsValid(int value);
constexpr TryImproveRequest_Approach TryImproveRequest_Approach_Approach_MIN = TryImproveRequest_Approach_RANDOM;
constexpr TryImproveRequest_Approach TryImproveRequest_Approach_Approach_MAX = TryImproveRequest_Approach_CHOP;
constexpr int TryImproveRequest_Approach_Approach_ARRAYSIZE = TryImproveRequest_Approach_Approach_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TryImproveRequest_Approach_descriptor();
template<typename T>
inline const std::string& TryImproveRequest_Approach_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TryImproveRequest_Approach>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TryImproveRequest_Approach_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TryImproveRequest_Approach_descriptor(), enum_t_value);
}
inline bool TryImproveRequest_Approach_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TryImproveRequest_Approach* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TryImproveRequest_Approach>(
    TryImproveRequest_Approach_descriptor(), name, value);
}
// ===================================================================

class MarkovInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MarkovInput) */ {
 public:
  inline MarkovInput() : MarkovInput(nullptr) {}
  ~MarkovInput() override;
  explicit constexpr MarkovInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarkovInput(const MarkovInput& from);
  MarkovInput(MarkovInput&& from) noexcept
    : MarkovInput() {
    *this = ::std::move(from);
  }

  inline MarkovInput& operator=(const MarkovInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarkovInput& operator=(MarkovInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarkovInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarkovInput* internal_default_instance() {
    return reinterpret_cast<const MarkovInput*>(
               &_MarkovInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MarkovInput& a, MarkovInput& b) {
    a.Swap(&b);
  }
  inline void Swap(MarkovInput* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarkovInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarkovInput* New() const final {
    return new MarkovInput();
  }

  MarkovInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarkovInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarkovInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MarkovInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkovInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MarkovInput";
  }
  protected:
  explicit MarkovInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MarkovInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_marionet_2eproto;
};
// -------------------------------------------------------------------

class FutureProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FutureProto) */ {
 public:
  inline FutureProto() : FutureProto(nullptr) {}
  ~FutureProto() override;
  explicit constexpr FutureProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FutureProto(const FutureProto& from);
  FutureProto(FutureProto&& from) noexcept
    : FutureProto() {
    *this = ::std::move(from);
  }

  inline FutureProto& operator=(const FutureProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FutureProto& operator=(FutureProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FutureProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FutureProto* internal_default_instance() {
    return reinterpret_cast<const FutureProto*>(
               &_FutureProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FutureProto& a, FutureProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FutureProto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FutureProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FutureProto* New() const final {
    return new FutureProto();
  }

  FutureProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FutureProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FutureProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FutureProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FutureProto";
  }
  protected:
  explicit FutureProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 4,
  };
  // optional bytes inputs = 4;
  bool has_inputs() const;
  private:
  bool _internal_has_inputs() const;
  public:
  void clear_inputs();
  const std::string& inputs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inputs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inputs();
  PROTOBUF_MUST_USE_RESULT std::string* release_inputs();
  void set_allocated_inputs(std::string* inputs);
  private:
  const std::string& _internal_inputs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inputs(const std::string& value);
  std::string* _internal_mutable_inputs();
  public:

  // @@protoc_insertion_point(class_scope:FutureProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputs_;
  friend struct ::TableStruct_marionet_2eproto;
};
// -------------------------------------------------------------------

class PlayFunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayFunRequest) */ {
 public:
  inline PlayFunRequest() : PlayFunRequest(nullptr) {}
  ~PlayFunRequest() override;
  explicit constexpr PlayFunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayFunRequest(const PlayFunRequest& from);
  PlayFunRequest(PlayFunRequest&& from) noexcept
    : PlayFunRequest() {
    *this = ::std::move(from);
  }

  inline PlayFunRequest& operator=(const PlayFunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayFunRequest& operator=(PlayFunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayFunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayFunRequest* internal_default_instance() {
    return reinterpret_cast<const PlayFunRequest*>(
               &_PlayFunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayFunRequest& a, PlayFunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayFunRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayFunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayFunRequest* New() const final {
    return new PlayFunRequest();
  }

  PlayFunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayFunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayFunRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayFunRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayFunRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayFunRequest";
  }
  protected:
  explicit PlayFunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFuturesFieldNumber = 3,
    kCurrentStateFieldNumber = 1,
    kNextFieldNumber = 2,
  };
  // repeated .FutureProto futures = 3;
  int futures_size() const;
  private:
  int _internal_futures_size() const;
  public:
  void clear_futures();
  ::FutureProto* mutable_futures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FutureProto >*
      mutable_futures();
  private:
  const ::FutureProto& _internal_futures(int index) const;
  ::FutureProto* _internal_add_futures();
  public:
  const ::FutureProto& futures(int index) const;
  ::FutureProto* add_futures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FutureProto >&
      futures() const;

  // optional bytes current_state = 1;
  bool has_current_state() const;
  private:
  bool _internal_has_current_state() const;
  public:
  void clear_current_state();
  const std::string& current_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_current_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_current_state();
  PROTOBUF_MUST_USE_RESULT std::string* release_current_state();
  void set_allocated_current_state(std::string* current_state);
  private:
  const std::string& _internal_current_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_state(const std::string& value);
  std::string* _internal_mutable_current_state();
  public:

  // optional bytes next = 2;
  bool has_next() const;
  private:
  bool _internal_has_next() const;
  public:
  void clear_next();
  const std::string& next() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next();
  PROTOBUF_MUST_USE_RESULT std::string* release_next();
  void set_allocated_next(std::string* next);
  private:
  const std::string& _internal_next() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next(const std::string& value);
  std::string* _internal_mutable_next();
  public:

  // @@protoc_insertion_point(class_scope:PlayFunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FutureProto > futures_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_;
  friend struct ::TableStruct_marionet_2eproto;
};
// -------------------------------------------------------------------

class PlayFunResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayFunResponse) */ {
 public:
  inline PlayFunResponse() : PlayFunResponse(nullptr) {}
  ~PlayFunResponse() override;
  explicit constexpr PlayFunResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayFunResponse(const PlayFunResponse& from);
  PlayFunResponse(PlayFunResponse&& from) noexcept
    : PlayFunResponse() {
    *this = ::std::move(from);
  }

  inline PlayFunResponse& operator=(const PlayFunResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayFunResponse& operator=(PlayFunResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayFunResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayFunResponse* internal_default_instance() {
    return reinterpret_cast<const PlayFunResponse*>(
               &_PlayFunResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlayFunResponse& a, PlayFunResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayFunResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayFunResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayFunResponse* New() const final {
    return new PlayFunResponse();
  }

  PlayFunResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayFunResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayFunResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayFunResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayFunResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayFunResponse";
  }
  protected:
  explicit PlayFunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFuturescoresFieldNumber = 5,
    kImmediateScoreFieldNumber = 1,
    kBestFutureScoreFieldNumber = 2,
    kWorstFutureScoreFieldNumber = 3,
    kFuturesScoreFieldNumber = 4,
  };
  // repeated double futurescores = 5;
  int futurescores_size() const;
  private:
  int _internal_futurescores_size() const;
  public:
  void clear_futurescores();
  private:
  double _internal_futurescores(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_futurescores() const;
  void _internal_add_futurescores(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_futurescores();
  public:
  double futurescores(int index) const;
  void set_futurescores(int index, double value);
  void add_futurescores(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      futurescores() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_futurescores();

  // optional double immediate_score = 1;
  bool has_immediate_score() const;
  private:
  bool _internal_has_immediate_score() const;
  public:
  void clear_immediate_score();
  double immediate_score() const;
  void set_immediate_score(double value);
  private:
  double _internal_immediate_score() const;
  void _internal_set_immediate_score(double value);
  public:

  // optional double best_future_score = 2;
  bool has_best_future_score() const;
  private:
  bool _internal_has_best_future_score() const;
  public:
  void clear_best_future_score();
  double best_future_score() const;
  void set_best_future_score(double value);
  private:
  double _internal_best_future_score() const;
  void _internal_set_best_future_score(double value);
  public:

  // optional double worst_future_score = 3;
  bool has_worst_future_score() const;
  private:
  bool _internal_has_worst_future_score() const;
  public:
  void clear_worst_future_score();
  double worst_future_score() const;
  void set_worst_future_score(double value);
  private:
  double _internal_worst_future_score() const;
  void _internal_set_worst_future_score(double value);
  public:

  // optional double futures_score = 4;
  bool has_futures_score() const;
  private:
  bool _internal_has_futures_score() const;
  public:
  void clear_futures_score();
  double futures_score() const;
  void set_futures_score(double value);
  private:
  double _internal_futures_score() const;
  void _internal_set_futures_score(double value);
  public:

  // @@protoc_insertion_point(class_scope:PlayFunResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > futurescores_;
  double immediate_score_;
  double best_future_score_;
  double worst_future_score_;
  double futures_score_;
  friend struct ::TableStruct_marionet_2eproto;
};
// -------------------------------------------------------------------

class TryImproveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TryImproveRequest) */ {
 public:
  inline TryImproveRequest() : TryImproveRequest(nullptr) {}
  ~TryImproveRequest() override;
  explicit constexpr TryImproveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TryImproveRequest(const TryImproveRequest& from);
  TryImproveRequest(TryImproveRequest&& from) noexcept
    : TryImproveRequest() {
    *this = ::std::move(from);
  }

  inline TryImproveRequest& operator=(const TryImproveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TryImproveRequest& operator=(TryImproveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TryImproveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TryImproveRequest* internal_default_instance() {
    return reinterpret_cast<const TryImproveRequest*>(
               &_TryImproveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TryImproveRequest& a, TryImproveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TryImproveRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TryImproveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TryImproveRequest* New() const final {
    return new TryImproveRequest();
  }

  TryImproveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TryImproveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TryImproveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TryImproveRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TryImproveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TryImproveRequest";
  }
  protected:
  explicit TryImproveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TryImproveRequest_Approach Approach;
  static constexpr Approach RANDOM =
    TryImproveRequest_Approach_RANDOM;
  static constexpr Approach OPPOSITES =
    TryImproveRequest_Approach_OPPOSITES;
  static constexpr Approach ABLATION =
    TryImproveRequest_Approach_ABLATION;
  static constexpr Approach CHOP =
    TryImproveRequest_Approach_CHOP;
  static inline bool Approach_IsValid(int value) {
    return TryImproveRequest_Approach_IsValid(value);
  }
  static constexpr Approach Approach_MIN =
    TryImproveRequest_Approach_Approach_MIN;
  static constexpr Approach Approach_MAX =
    TryImproveRequest_Approach_Approach_MAX;
  static constexpr int Approach_ARRAYSIZE =
    TryImproveRequest_Approach_Approach_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Approach_descriptor() {
    return TryImproveRequest_Approach_descriptor();
  }
  template<typename T>
  static inline const std::string& Approach_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Approach>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Approach_Name.");
    return TryImproveRequest_Approach_Name(enum_t_value);
  }
  static inline bool Approach_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Approach* value) {
    return TryImproveRequest_Approach_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStartStateFieldNumber = 1,
    kImprovemeFieldNumber = 2,
    kEndStateFieldNumber = 3,
    kSeedFieldNumber = 6,
    kEndIntegralFieldNumber = 4,
    kApproachFieldNumber = 5,
    kItersFieldNumber = 7,
    kMaxbestFieldNumber = 8,
  };
  // optional bytes start_state = 1;
  bool has_start_state() const;
  private:
  bool _internal_has_start_state() const;
  public:
  void clear_start_state();
  const std::string& start_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_state();
  PROTOBUF_MUST_USE_RESULT std::string* release_start_state();
  void set_allocated_start_state(std::string* start_state);
  private:
  const std::string& _internal_start_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_state(const std::string& value);
  std::string* _internal_mutable_start_state();
  public:

  // optional bytes improveme = 2;
  bool has_improveme() const;
  private:
  bool _internal_has_improveme() const;
  public:
  void clear_improveme();
  const std::string& improveme() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_improveme(ArgT0&& arg0, ArgT... args);
  std::string* mutable_improveme();
  PROTOBUF_MUST_USE_RESULT std::string* release_improveme();
  void set_allocated_improveme(std::string* improveme);
  private:
  const std::string& _internal_improveme() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_improveme(const std::string& value);
  std::string* _internal_mutable_improveme();
  public:

  // optional bytes end_state = 3;
  bool has_end_state() const;
  private:
  bool _internal_has_end_state() const;
  public:
  void clear_end_state();
  const std::string& end_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end_state();
  PROTOBUF_MUST_USE_RESULT std::string* release_end_state();
  void set_allocated_end_state(std::string* end_state);
  private:
  const std::string& _internal_end_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_state(const std::string& value);
  std::string* _internal_mutable_end_state();
  public:

  // optional string seed = 6;
  bool has_seed() const;
  private:
  bool _internal_has_seed() const;
  public:
  void clear_seed();
  const std::string& seed() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_seed(ArgT0&& arg0, ArgT... args);
  std::string* mutable_seed();
  PROTOBUF_MUST_USE_RESULT std::string* release_seed();
  void set_allocated_seed(std::string* seed);
  private:
  const std::string& _internal_seed() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seed(const std::string& value);
  std::string* _internal_mutable_seed();
  public:

  // optional double end_integral = 4;
  bool has_end_integral() const;
  private:
  bool _internal_has_end_integral() const;
  public:
  void clear_end_integral();
  double end_integral() const;
  void set_end_integral(double value);
  private:
  double _internal_end_integral() const;
  void _internal_set_end_integral(double value);
  public:

  // optional .TryImproveRequest.Approach approach = 5;
  bool has_approach() const;
  private:
  bool _internal_has_approach() const;
  public:
  void clear_approach();
  ::TryImproveRequest_Approach approach() const;
  void set_approach(::TryImproveRequest_Approach value);
  private:
  ::TryImproveRequest_Approach _internal_approach() const;
  void _internal_set_approach(::TryImproveRequest_Approach value);
  public:

  // optional int32 iters = 7;
  bool has_iters() const;
  private:
  bool _internal_has_iters() const;
  public:
  void clear_iters();
  ::PROTOBUF_NAMESPACE_ID::int32 iters() const;
  void set_iters(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iters() const;
  void _internal_set_iters(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 maxbest = 8;
  bool has_maxbest() const;
  private:
  bool _internal_has_maxbest() const;
  public:
  void clear_maxbest();
  ::PROTOBUF_NAMESPACE_ID::int32 maxbest() const;
  void set_maxbest(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxbest() const;
  void _internal_set_maxbest(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TryImproveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr improveme_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seed_;
  double end_integral_;
  int approach_;
  ::PROTOBUF_NAMESPACE_ID::int32 iters_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxbest_;
  friend struct ::TableStruct_marionet_2eproto;
};
// -------------------------------------------------------------------

class TryImproveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TryImproveResponse) */ {
 public:
  inline TryImproveResponse() : TryImproveResponse(nullptr) {}
  ~TryImproveResponse() override;
  explicit constexpr TryImproveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TryImproveResponse(const TryImproveResponse& from);
  TryImproveResponse(TryImproveResponse&& from) noexcept
    : TryImproveResponse() {
    *this = ::std::move(from);
  }

  inline TryImproveResponse& operator=(const TryImproveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TryImproveResponse& operator=(TryImproveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TryImproveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TryImproveResponse* internal_default_instance() {
    return reinterpret_cast<const TryImproveResponse*>(
               &_TryImproveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TryImproveResponse& a, TryImproveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TryImproveResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TryImproveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TryImproveResponse* New() const final {
    return new TryImproveResponse();
  }

  TryImproveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TryImproveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TryImproveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TryImproveResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TryImproveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TryImproveResponse";
  }
  protected:
  explicit TryImproveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 1,
    kScoreFieldNumber = 2,
    kItersTriedFieldNumber = 3,
    kItersBetterFieldNumber = 4,
  };
  // repeated bytes inputs = 1;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  const std::string& inputs(int index) const;
  std::string* mutable_inputs(int index);
  void set_inputs(int index, const std::string& value);
  void set_inputs(int index, std::string&& value);
  void set_inputs(int index, const char* value);
  void set_inputs(int index, const void* value, size_t size);
  std::string* add_inputs();
  void add_inputs(const std::string& value);
  void add_inputs(std::string&& value);
  void add_inputs(const char* value);
  void add_inputs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inputs();
  private:
  const std::string& _internal_inputs(int index) const;
  std::string* _internal_add_inputs();
  public:

  // repeated double score = 2;
  int score_size() const;
  private:
  int _internal_score_size() const;
  public:
  void clear_score();
  private:
  double _internal_score(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_score() const;
  void _internal_add_score(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_score();
  public:
  double score(int index) const;
  void set_score(int index, double value);
  void add_score(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      score() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_score();

  // optional int32 iters_tried = 3;
  bool has_iters_tried() const;
  private:
  bool _internal_has_iters_tried() const;
  public:
  void clear_iters_tried();
  ::PROTOBUF_NAMESPACE_ID::int32 iters_tried() const;
  void set_iters_tried(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iters_tried() const;
  void _internal_set_iters_tried(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 iters_better = 4;
  bool has_iters_better() const;
  private:
  bool _internal_has_iters_better() const;
  public:
  void clear_iters_better();
  ::PROTOBUF_NAMESPACE_ID::int32 iters_better() const;
  void set_iters_better(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iters_better() const;
  void _internal_set_iters_better(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TryImproveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > score_;
  ::PROTOBUF_NAMESPACE_ID::int32 iters_tried_;
  ::PROTOBUF_NAMESPACE_ID::int32 iters_better_;
  friend struct ::TableStruct_marionet_2eproto;
};
// -------------------------------------------------------------------

class HelperRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HelperRequest) */ {
 public:
  inline HelperRequest() : HelperRequest(nullptr) {}
  ~HelperRequest() override;
  explicit constexpr HelperRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelperRequest(const HelperRequest& from);
  HelperRequest(HelperRequest&& from) noexcept
    : HelperRequest() {
    *this = ::std::move(from);
  }

  inline HelperRequest& operator=(const HelperRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelperRequest& operator=(HelperRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelperRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelperRequest* internal_default_instance() {
    return reinterpret_cast<const HelperRequest*>(
               &_HelperRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HelperRequest& a, HelperRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HelperRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelperRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelperRequest* New() const final {
    return new HelperRequest();
  }

  HelperRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelperRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelperRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HelperRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelperRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HelperRequest";
  }
  protected:
  explicit HelperRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayfunFieldNumber = 1,
    kTryimproveFieldNumber = 2,
  };
  // optional .PlayFunRequest playfun = 1;
  bool has_playfun() const;
  private:
  bool _internal_has_playfun() const;
  public:
  void clear_playfun();
  const ::PlayFunRequest& playfun() const;
  PROTOBUF_MUST_USE_RESULT ::PlayFunRequest* release_playfun();
  ::PlayFunRequest* mutable_playfun();
  void set_allocated_playfun(::PlayFunRequest* playfun);
  private:
  const ::PlayFunRequest& _internal_playfun() const;
  ::PlayFunRequest* _internal_mutable_playfun();
  public:
  void unsafe_arena_set_allocated_playfun(
      ::PlayFunRequest* playfun);
  ::PlayFunRequest* unsafe_arena_release_playfun();

  // optional .TryImproveRequest tryimprove = 2;
  bool has_tryimprove() const;
  private:
  bool _internal_has_tryimprove() const;
  public:
  void clear_tryimprove();
  const ::TryImproveRequest& tryimprove() const;
  PROTOBUF_MUST_USE_RESULT ::TryImproveRequest* release_tryimprove();
  ::TryImproveRequest* mutable_tryimprove();
  void set_allocated_tryimprove(::TryImproveRequest* tryimprove);
  private:
  const ::TryImproveRequest& _internal_tryimprove() const;
  ::TryImproveRequest* _internal_mutable_tryimprove();
  public:
  void unsafe_arena_set_allocated_tryimprove(
      ::TryImproveRequest* tryimprove);
  ::TryImproveRequest* unsafe_arena_release_tryimprove();

  // @@protoc_insertion_point(class_scope:HelperRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PlayFunRequest* playfun_;
  ::TryImproveRequest* tryimprove_;
  friend struct ::TableStruct_marionet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MarkovInput

// -------------------------------------------------------------------

// FutureProto

// optional bytes inputs = 4;
inline bool FutureProto::_internal_has_inputs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FutureProto::has_inputs() const {
  return _internal_has_inputs();
}
inline void FutureProto::clear_inputs() {
  inputs_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FutureProto::inputs() const {
  // @@protoc_insertion_point(field_get:FutureProto.inputs)
  return _internal_inputs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FutureProto::set_inputs(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 inputs_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FutureProto.inputs)
}
inline std::string* FutureProto::mutable_inputs() {
  std::string* _s = _internal_mutable_inputs();
  // @@protoc_insertion_point(field_mutable:FutureProto.inputs)
  return _s;
}
inline const std::string& FutureProto::_internal_inputs() const {
  return inputs_.Get();
}
inline void FutureProto::_internal_set_inputs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  inputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FutureProto::_internal_mutable_inputs() {
  _has_bits_[0] |= 0x00000001u;
  return inputs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FutureProto::release_inputs() {
  // @@protoc_insertion_point(field_release:FutureProto.inputs)
  if (!_internal_has_inputs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return inputs_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FutureProto::set_allocated_inputs(std::string* inputs) {
  if (inputs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  inputs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inputs,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FutureProto.inputs)
}

// -------------------------------------------------------------------

// PlayFunRequest

// optional bytes current_state = 1;
inline bool PlayFunRequest::_internal_has_current_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayFunRequest::has_current_state() const {
  return _internal_has_current_state();
}
inline void PlayFunRequest::clear_current_state() {
  current_state_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayFunRequest::current_state() const {
  // @@protoc_insertion_point(field_get:PlayFunRequest.current_state)
  return _internal_current_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayFunRequest::set_current_state(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 current_state_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PlayFunRequest.current_state)
}
inline std::string* PlayFunRequest::mutable_current_state() {
  std::string* _s = _internal_mutable_current_state();
  // @@protoc_insertion_point(field_mutable:PlayFunRequest.current_state)
  return _s;
}
inline const std::string& PlayFunRequest::_internal_current_state() const {
  return current_state_.Get();
}
inline void PlayFunRequest::_internal_set_current_state(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  current_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayFunRequest::_internal_mutable_current_state() {
  _has_bits_[0] |= 0x00000001u;
  return current_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayFunRequest::release_current_state() {
  // @@protoc_insertion_point(field_release:PlayFunRequest.current_state)
  if (!_internal_has_current_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return current_state_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayFunRequest::set_allocated_current_state(std::string* current_state) {
  if (current_state != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  current_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_state,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PlayFunRequest.current_state)
}

// optional bytes next = 2;
inline bool PlayFunRequest::_internal_has_next() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayFunRequest::has_next() const {
  return _internal_has_next();
}
inline void PlayFunRequest::clear_next() {
  next_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PlayFunRequest::next() const {
  // @@protoc_insertion_point(field_get:PlayFunRequest.next)
  return _internal_next();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayFunRequest::set_next(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 next_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PlayFunRequest.next)
}
inline std::string* PlayFunRequest::mutable_next() {
  std::string* _s = _internal_mutable_next();
  // @@protoc_insertion_point(field_mutable:PlayFunRequest.next)
  return _s;
}
inline const std::string& PlayFunRequest::_internal_next() const {
  return next_.Get();
}
inline void PlayFunRequest::_internal_set_next(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  next_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayFunRequest::_internal_mutable_next() {
  _has_bits_[0] |= 0x00000002u;
  return next_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayFunRequest::release_next() {
  // @@protoc_insertion_point(field_release:PlayFunRequest.next)
  if (!_internal_has_next()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return next_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayFunRequest::set_allocated_next(std::string* next) {
  if (next != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  next_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PlayFunRequest.next)
}

// repeated .FutureProto futures = 3;
inline int PlayFunRequest::_internal_futures_size() const {
  return futures_.size();
}
inline int PlayFunRequest::futures_size() const {
  return _internal_futures_size();
}
inline void PlayFunRequest::clear_futures() {
  futures_.Clear();
}
inline ::FutureProto* PlayFunRequest::mutable_futures(int index) {
  // @@protoc_insertion_point(field_mutable:PlayFunRequest.futures)
  return futures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FutureProto >*
PlayFunRequest::mutable_futures() {
  // @@protoc_insertion_point(field_mutable_list:PlayFunRequest.futures)
  return &futures_;
}
inline const ::FutureProto& PlayFunRequest::_internal_futures(int index) const {
  return futures_.Get(index);
}
inline const ::FutureProto& PlayFunRequest::futures(int index) const {
  // @@protoc_insertion_point(field_get:PlayFunRequest.futures)
  return _internal_futures(index);
}
inline ::FutureProto* PlayFunRequest::_internal_add_futures() {
  return futures_.Add();
}
inline ::FutureProto* PlayFunRequest::add_futures() {
  ::FutureProto* _add = _internal_add_futures();
  // @@protoc_insertion_point(field_add:PlayFunRequest.futures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FutureProto >&
PlayFunRequest::futures() const {
  // @@protoc_insertion_point(field_list:PlayFunRequest.futures)
  return futures_;
}

// -------------------------------------------------------------------

// PlayFunResponse

// optional double immediate_score = 1;
inline bool PlayFunResponse::_internal_has_immediate_score() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayFunResponse::has_immediate_score() const {
  return _internal_has_immediate_score();
}
inline void PlayFunResponse::clear_immediate_score() {
  immediate_score_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PlayFunResponse::_internal_immediate_score() const {
  return immediate_score_;
}
inline double PlayFunResponse::immediate_score() const {
  // @@protoc_insertion_point(field_get:PlayFunResponse.immediate_score)
  return _internal_immediate_score();
}
inline void PlayFunResponse::_internal_set_immediate_score(double value) {
  _has_bits_[0] |= 0x00000001u;
  immediate_score_ = value;
}
inline void PlayFunResponse::set_immediate_score(double value) {
  _internal_set_immediate_score(value);
  // @@protoc_insertion_point(field_set:PlayFunResponse.immediate_score)
}

// optional double best_future_score = 2;
inline bool PlayFunResponse::_internal_has_best_future_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayFunResponse::has_best_future_score() const {
  return _internal_has_best_future_score();
}
inline void PlayFunResponse::clear_best_future_score() {
  best_future_score_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PlayFunResponse::_internal_best_future_score() const {
  return best_future_score_;
}
inline double PlayFunResponse::best_future_score() const {
  // @@protoc_insertion_point(field_get:PlayFunResponse.best_future_score)
  return _internal_best_future_score();
}
inline void PlayFunResponse::_internal_set_best_future_score(double value) {
  _has_bits_[0] |= 0x00000002u;
  best_future_score_ = value;
}
inline void PlayFunResponse::set_best_future_score(double value) {
  _internal_set_best_future_score(value);
  // @@protoc_insertion_point(field_set:PlayFunResponse.best_future_score)
}

// optional double worst_future_score = 3;
inline bool PlayFunResponse::_internal_has_worst_future_score() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayFunResponse::has_worst_future_score() const {
  return _internal_has_worst_future_score();
}
inline void PlayFunResponse::clear_worst_future_score() {
  worst_future_score_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PlayFunResponse::_internal_worst_future_score() const {
  return worst_future_score_;
}
inline double PlayFunResponse::worst_future_score() const {
  // @@protoc_insertion_point(field_get:PlayFunResponse.worst_future_score)
  return _internal_worst_future_score();
}
inline void PlayFunResponse::_internal_set_worst_future_score(double value) {
  _has_bits_[0] |= 0x00000004u;
  worst_future_score_ = value;
}
inline void PlayFunResponse::set_worst_future_score(double value) {
  _internal_set_worst_future_score(value);
  // @@protoc_insertion_point(field_set:PlayFunResponse.worst_future_score)
}

// optional double futures_score = 4;
inline bool PlayFunResponse::_internal_has_futures_score() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlayFunResponse::has_futures_score() const {
  return _internal_has_futures_score();
}
inline void PlayFunResponse::clear_futures_score() {
  futures_score_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PlayFunResponse::_internal_futures_score() const {
  return futures_score_;
}
inline double PlayFunResponse::futures_score() const {
  // @@protoc_insertion_point(field_get:PlayFunResponse.futures_score)
  return _internal_futures_score();
}
inline void PlayFunResponse::_internal_set_futures_score(double value) {
  _has_bits_[0] |= 0x00000008u;
  futures_score_ = value;
}
inline void PlayFunResponse::set_futures_score(double value) {
  _internal_set_futures_score(value);
  // @@protoc_insertion_point(field_set:PlayFunResponse.futures_score)
}

// repeated double futurescores = 5;
inline int PlayFunResponse::_internal_futurescores_size() const {
  return futurescores_.size();
}
inline int PlayFunResponse::futurescores_size() const {
  return _internal_futurescores_size();
}
inline void PlayFunResponse::clear_futurescores() {
  futurescores_.Clear();
}
inline double PlayFunResponse::_internal_futurescores(int index) const {
  return futurescores_.Get(index);
}
inline double PlayFunResponse::futurescores(int index) const {
  // @@protoc_insertion_point(field_get:PlayFunResponse.futurescores)
  return _internal_futurescores(index);
}
inline void PlayFunResponse::set_futurescores(int index, double value) {
  futurescores_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlayFunResponse.futurescores)
}
inline void PlayFunResponse::_internal_add_futurescores(double value) {
  futurescores_.Add(value);
}
inline void PlayFunResponse::add_futurescores(double value) {
  _internal_add_futurescores(value);
  // @@protoc_insertion_point(field_add:PlayFunResponse.futurescores)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PlayFunResponse::_internal_futurescores() const {
  return futurescores_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PlayFunResponse::futurescores() const {
  // @@protoc_insertion_point(field_list:PlayFunResponse.futurescores)
  return _internal_futurescores();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PlayFunResponse::_internal_mutable_futurescores() {
  return &futurescores_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PlayFunResponse::mutable_futurescores() {
  // @@protoc_insertion_point(field_mutable_list:PlayFunResponse.futurescores)
  return _internal_mutable_futurescores();
}

// -------------------------------------------------------------------

// TryImproveRequest

// optional bytes start_state = 1;
inline bool TryImproveRequest::_internal_has_start_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TryImproveRequest::has_start_state() const {
  return _internal_has_start_state();
}
inline void TryImproveRequest::clear_start_state() {
  start_state_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TryImproveRequest::start_state() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.start_state)
  return _internal_start_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TryImproveRequest::set_start_state(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 start_state_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TryImproveRequest.start_state)
}
inline std::string* TryImproveRequest::mutable_start_state() {
  std::string* _s = _internal_mutable_start_state();
  // @@protoc_insertion_point(field_mutable:TryImproveRequest.start_state)
  return _s;
}
inline const std::string& TryImproveRequest::_internal_start_state() const {
  return start_state_.Get();
}
inline void TryImproveRequest::_internal_set_start_state(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  start_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TryImproveRequest::_internal_mutable_start_state() {
  _has_bits_[0] |= 0x00000001u;
  return start_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TryImproveRequest::release_start_state() {
  // @@protoc_insertion_point(field_release:TryImproveRequest.start_state)
  if (!_internal_has_start_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return start_state_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TryImproveRequest::set_allocated_start_state(std::string* start_state) {
  if (start_state != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_state,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TryImproveRequest.start_state)
}

// optional bytes improveme = 2;
inline bool TryImproveRequest::_internal_has_improveme() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TryImproveRequest::has_improveme() const {
  return _internal_has_improveme();
}
inline void TryImproveRequest::clear_improveme() {
  improveme_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TryImproveRequest::improveme() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.improveme)
  return _internal_improveme();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TryImproveRequest::set_improveme(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 improveme_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TryImproveRequest.improveme)
}
inline std::string* TryImproveRequest::mutable_improveme() {
  std::string* _s = _internal_mutable_improveme();
  // @@protoc_insertion_point(field_mutable:TryImproveRequest.improveme)
  return _s;
}
inline const std::string& TryImproveRequest::_internal_improveme() const {
  return improveme_.Get();
}
inline void TryImproveRequest::_internal_set_improveme(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  improveme_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TryImproveRequest::_internal_mutable_improveme() {
  _has_bits_[0] |= 0x00000002u;
  return improveme_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TryImproveRequest::release_improveme() {
  // @@protoc_insertion_point(field_release:TryImproveRequest.improveme)
  if (!_internal_has_improveme()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return improveme_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TryImproveRequest::set_allocated_improveme(std::string* improveme) {
  if (improveme != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  improveme_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), improveme,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TryImproveRequest.improveme)
}

// optional bytes end_state = 3;
inline bool TryImproveRequest::_internal_has_end_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TryImproveRequest::has_end_state() const {
  return _internal_has_end_state();
}
inline void TryImproveRequest::clear_end_state() {
  end_state_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TryImproveRequest::end_state() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.end_state)
  return _internal_end_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TryImproveRequest::set_end_state(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 end_state_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TryImproveRequest.end_state)
}
inline std::string* TryImproveRequest::mutable_end_state() {
  std::string* _s = _internal_mutable_end_state();
  // @@protoc_insertion_point(field_mutable:TryImproveRequest.end_state)
  return _s;
}
inline const std::string& TryImproveRequest::_internal_end_state() const {
  return end_state_.Get();
}
inline void TryImproveRequest::_internal_set_end_state(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  end_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TryImproveRequest::_internal_mutable_end_state() {
  _has_bits_[0] |= 0x00000004u;
  return end_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TryImproveRequest::release_end_state() {
  // @@protoc_insertion_point(field_release:TryImproveRequest.end_state)
  if (!_internal_has_end_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return end_state_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TryImproveRequest::set_allocated_end_state(std::string* end_state) {
  if (end_state != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  end_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_state,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TryImproveRequest.end_state)
}

// optional double end_integral = 4;
inline bool TryImproveRequest::_internal_has_end_integral() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TryImproveRequest::has_end_integral() const {
  return _internal_has_end_integral();
}
inline void TryImproveRequest::clear_end_integral() {
  end_integral_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double TryImproveRequest::_internal_end_integral() const {
  return end_integral_;
}
inline double TryImproveRequest::end_integral() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.end_integral)
  return _internal_end_integral();
}
inline void TryImproveRequest::_internal_set_end_integral(double value) {
  _has_bits_[0] |= 0x00000010u;
  end_integral_ = value;
}
inline void TryImproveRequest::set_end_integral(double value) {
  _internal_set_end_integral(value);
  // @@protoc_insertion_point(field_set:TryImproveRequest.end_integral)
}

// optional .TryImproveRequest.Approach approach = 5;
inline bool TryImproveRequest::_internal_has_approach() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TryImproveRequest::has_approach() const {
  return _internal_has_approach();
}
inline void TryImproveRequest::clear_approach() {
  approach_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::TryImproveRequest_Approach TryImproveRequest::_internal_approach() const {
  return static_cast< ::TryImproveRequest_Approach >(approach_);
}
inline ::TryImproveRequest_Approach TryImproveRequest::approach() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.approach)
  return _internal_approach();
}
inline void TryImproveRequest::_internal_set_approach(::TryImproveRequest_Approach value) {
  assert(::TryImproveRequest_Approach_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  approach_ = value;
}
inline void TryImproveRequest::set_approach(::TryImproveRequest_Approach value) {
  _internal_set_approach(value);
  // @@protoc_insertion_point(field_set:TryImproveRequest.approach)
}

// optional string seed = 6;
inline bool TryImproveRequest::_internal_has_seed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TryImproveRequest::has_seed() const {
  return _internal_has_seed();
}
inline void TryImproveRequest::clear_seed() {
  seed_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TryImproveRequest::seed() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.seed)
  return _internal_seed();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TryImproveRequest::set_seed(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 seed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TryImproveRequest.seed)
}
inline std::string* TryImproveRequest::mutable_seed() {
  std::string* _s = _internal_mutable_seed();
  // @@protoc_insertion_point(field_mutable:TryImproveRequest.seed)
  return _s;
}
inline const std::string& TryImproveRequest::_internal_seed() const {
  return seed_.Get();
}
inline void TryImproveRequest::_internal_set_seed(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  seed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TryImproveRequest::_internal_mutable_seed() {
  _has_bits_[0] |= 0x00000008u;
  return seed_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TryImproveRequest::release_seed() {
  // @@protoc_insertion_point(field_release:TryImproveRequest.seed)
  if (!_internal_has_seed()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return seed_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TryImproveRequest::set_allocated_seed(std::string* seed) {
  if (seed != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  seed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seed,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TryImproveRequest.seed)
}

// optional int32 iters = 7;
inline bool TryImproveRequest::_internal_has_iters() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TryImproveRequest::has_iters() const {
  return _internal_has_iters();
}
inline void TryImproveRequest::clear_iters() {
  iters_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TryImproveRequest::_internal_iters() const {
  return iters_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TryImproveRequest::iters() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.iters)
  return _internal_iters();
}
inline void TryImproveRequest::_internal_set_iters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  iters_ = value;
}
inline void TryImproveRequest::set_iters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iters(value);
  // @@protoc_insertion_point(field_set:TryImproveRequest.iters)
}

// optional int32 maxbest = 8;
inline bool TryImproveRequest::_internal_has_maxbest() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TryImproveRequest::has_maxbest() const {
  return _internal_has_maxbest();
}
inline void TryImproveRequest::clear_maxbest() {
  maxbest_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TryImproveRequest::_internal_maxbest() const {
  return maxbest_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TryImproveRequest::maxbest() const {
  // @@protoc_insertion_point(field_get:TryImproveRequest.maxbest)
  return _internal_maxbest();
}
inline void TryImproveRequest::_internal_set_maxbest(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  maxbest_ = value;
}
inline void TryImproveRequest::set_maxbest(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxbest(value);
  // @@protoc_insertion_point(field_set:TryImproveRequest.maxbest)
}

// -------------------------------------------------------------------

// TryImproveResponse

// repeated bytes inputs = 1;
inline int TryImproveResponse::_internal_inputs_size() const {
  return inputs_.size();
}
inline int TryImproveResponse::inputs_size() const {
  return _internal_inputs_size();
}
inline void TryImproveResponse::clear_inputs() {
  inputs_.Clear();
}
inline std::string* TryImproveResponse::add_inputs() {
  std::string* _s = _internal_add_inputs();
  // @@protoc_insertion_point(field_add_mutable:TryImproveResponse.inputs)
  return _s;
}
inline const std::string& TryImproveResponse::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const std::string& TryImproveResponse::inputs(int index) const {
  // @@protoc_insertion_point(field_get:TryImproveResponse.inputs)
  return _internal_inputs(index);
}
inline std::string* TryImproveResponse::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:TryImproveResponse.inputs)
  return inputs_.Mutable(index);
}
inline void TryImproveResponse::set_inputs(int index, const std::string& value) {
  inputs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TryImproveResponse.inputs)
}
inline void TryImproveResponse::set_inputs(int index, std::string&& value) {
  inputs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TryImproveResponse.inputs)
}
inline void TryImproveResponse::set_inputs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inputs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TryImproveResponse.inputs)
}
inline void TryImproveResponse::set_inputs(int index, const void* value, size_t size) {
  inputs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TryImproveResponse.inputs)
}
inline std::string* TryImproveResponse::_internal_add_inputs() {
  return inputs_.Add();
}
inline void TryImproveResponse::add_inputs(const std::string& value) {
  inputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TryImproveResponse.inputs)
}
inline void TryImproveResponse::add_inputs(std::string&& value) {
  inputs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TryImproveResponse.inputs)
}
inline void TryImproveResponse::add_inputs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TryImproveResponse.inputs)
}
inline void TryImproveResponse::add_inputs(const void* value, size_t size) {
  inputs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TryImproveResponse.inputs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TryImproveResponse::inputs() const {
  // @@protoc_insertion_point(field_list:TryImproveResponse.inputs)
  return inputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TryImproveResponse::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:TryImproveResponse.inputs)
  return &inputs_;
}

// repeated double score = 2;
inline int TryImproveResponse::_internal_score_size() const {
  return score_.size();
}
inline int TryImproveResponse::score_size() const {
  return _internal_score_size();
}
inline void TryImproveResponse::clear_score() {
  score_.Clear();
}
inline double TryImproveResponse::_internal_score(int index) const {
  return score_.Get(index);
}
inline double TryImproveResponse::score(int index) const {
  // @@protoc_insertion_point(field_get:TryImproveResponse.score)
  return _internal_score(index);
}
inline void TryImproveResponse::set_score(int index, double value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:TryImproveResponse.score)
}
inline void TryImproveResponse::_internal_add_score(double value) {
  score_.Add(value);
}
inline void TryImproveResponse::add_score(double value) {
  _internal_add_score(value);
  // @@protoc_insertion_point(field_add:TryImproveResponse.score)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TryImproveResponse::_internal_score() const {
  return score_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TryImproveResponse::score() const {
  // @@protoc_insertion_point(field_list:TryImproveResponse.score)
  return _internal_score();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TryImproveResponse::_internal_mutable_score() {
  return &score_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TryImproveResponse::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:TryImproveResponse.score)
  return _internal_mutable_score();
}

// optional int32 iters_tried = 3;
inline bool TryImproveResponse::_internal_has_iters_tried() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TryImproveResponse::has_iters_tried() const {
  return _internal_has_iters_tried();
}
inline void TryImproveResponse::clear_iters_tried() {
  iters_tried_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TryImproveResponse::_internal_iters_tried() const {
  return iters_tried_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TryImproveResponse::iters_tried() const {
  // @@protoc_insertion_point(field_get:TryImproveResponse.iters_tried)
  return _internal_iters_tried();
}
inline void TryImproveResponse::_internal_set_iters_tried(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  iters_tried_ = value;
}
inline void TryImproveResponse::set_iters_tried(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iters_tried(value);
  // @@protoc_insertion_point(field_set:TryImproveResponse.iters_tried)
}

// optional int32 iters_better = 4;
inline bool TryImproveResponse::_internal_has_iters_better() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TryImproveResponse::has_iters_better() const {
  return _internal_has_iters_better();
}
inline void TryImproveResponse::clear_iters_better() {
  iters_better_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TryImproveResponse::_internal_iters_better() const {
  return iters_better_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TryImproveResponse::iters_better() const {
  // @@protoc_insertion_point(field_get:TryImproveResponse.iters_better)
  return _internal_iters_better();
}
inline void TryImproveResponse::_internal_set_iters_better(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  iters_better_ = value;
}
inline void TryImproveResponse::set_iters_better(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iters_better(value);
  // @@protoc_insertion_point(field_set:TryImproveResponse.iters_better)
}

// -------------------------------------------------------------------

// HelperRequest

// optional .PlayFunRequest playfun = 1;
inline bool HelperRequest::_internal_has_playfun() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || playfun_ != nullptr);
  return value;
}
inline bool HelperRequest::has_playfun() const {
  return _internal_has_playfun();
}
inline void HelperRequest::clear_playfun() {
  if (playfun_ != nullptr) playfun_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::PlayFunRequest& HelperRequest::_internal_playfun() const {
  const ::PlayFunRequest* p = playfun_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayFunRequest&>(
      ::_PlayFunRequest_default_instance_);
}
inline const ::PlayFunRequest& HelperRequest::playfun() const {
  // @@protoc_insertion_point(field_get:HelperRequest.playfun)
  return _internal_playfun();
}
inline void HelperRequest::unsafe_arena_set_allocated_playfun(
    ::PlayFunRequest* playfun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playfun_);
  }
  playfun_ = playfun;
  if (playfun) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HelperRequest.playfun)
}
inline ::PlayFunRequest* HelperRequest::release_playfun() {
  _has_bits_[0] &= ~0x00000001u;
  ::PlayFunRequest* temp = playfun_;
  playfun_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayFunRequest* HelperRequest::unsafe_arena_release_playfun() {
  // @@protoc_insertion_point(field_release:HelperRequest.playfun)
  _has_bits_[0] &= ~0x00000001u;
  ::PlayFunRequest* temp = playfun_;
  playfun_ = nullptr;
  return temp;
}
inline ::PlayFunRequest* HelperRequest::_internal_mutable_playfun() {
  _has_bits_[0] |= 0x00000001u;
  if (playfun_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayFunRequest>(GetArenaForAllocation());
    playfun_ = p;
  }
  return playfun_;
}
inline ::PlayFunRequest* HelperRequest::mutable_playfun() {
  ::PlayFunRequest* _msg = _internal_mutable_playfun();
  // @@protoc_insertion_point(field_mutable:HelperRequest.playfun)
  return _msg;
}
inline void HelperRequest::set_allocated_playfun(::PlayFunRequest* playfun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete playfun_;
  }
  if (playfun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PlayFunRequest>::GetOwningArena(playfun);
    if (message_arena != submessage_arena) {
      playfun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playfun, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  playfun_ = playfun;
  // @@protoc_insertion_point(field_set_allocated:HelperRequest.playfun)
}

// optional .TryImproveRequest tryimprove = 2;
inline bool HelperRequest::_internal_has_tryimprove() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tryimprove_ != nullptr);
  return value;
}
inline bool HelperRequest::has_tryimprove() const {
  return _internal_has_tryimprove();
}
inline void HelperRequest::clear_tryimprove() {
  if (tryimprove_ != nullptr) tryimprove_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TryImproveRequest& HelperRequest::_internal_tryimprove() const {
  const ::TryImproveRequest* p = tryimprove_;
  return p != nullptr ? *p : reinterpret_cast<const ::TryImproveRequest&>(
      ::_TryImproveRequest_default_instance_);
}
inline const ::TryImproveRequest& HelperRequest::tryimprove() const {
  // @@protoc_insertion_point(field_get:HelperRequest.tryimprove)
  return _internal_tryimprove();
}
inline void HelperRequest::unsafe_arena_set_allocated_tryimprove(
    ::TryImproveRequest* tryimprove) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tryimprove_);
  }
  tryimprove_ = tryimprove;
  if (tryimprove) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HelperRequest.tryimprove)
}
inline ::TryImproveRequest* HelperRequest::release_tryimprove() {
  _has_bits_[0] &= ~0x00000002u;
  ::TryImproveRequest* temp = tryimprove_;
  tryimprove_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TryImproveRequest* HelperRequest::unsafe_arena_release_tryimprove() {
  // @@protoc_insertion_point(field_release:HelperRequest.tryimprove)
  _has_bits_[0] &= ~0x00000002u;
  ::TryImproveRequest* temp = tryimprove_;
  tryimprove_ = nullptr;
  return temp;
}
inline ::TryImproveRequest* HelperRequest::_internal_mutable_tryimprove() {
  _has_bits_[0] |= 0x00000002u;
  if (tryimprove_ == nullptr) {
    auto* p = CreateMaybeMessage<::TryImproveRequest>(GetArenaForAllocation());
    tryimprove_ = p;
  }
  return tryimprove_;
}
inline ::TryImproveRequest* HelperRequest::mutable_tryimprove() {
  ::TryImproveRequest* _msg = _internal_mutable_tryimprove();
  // @@protoc_insertion_point(field_mutable:HelperRequest.tryimprove)
  return _msg;
}
inline void HelperRequest::set_allocated_tryimprove(::TryImproveRequest* tryimprove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tryimprove_;
  }
  if (tryimprove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TryImproveRequest>::GetOwningArena(tryimprove);
    if (message_arena != submessage_arena) {
      tryimprove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tryimprove, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tryimprove_ = tryimprove;
  // @@protoc_insertion_point(field_set_allocated:HelperRequest.tryimprove)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TryImproveRequest_Approach> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TryImproveRequest_Approach>() {
  return ::TryImproveRequest_Approach_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_marionet_2eproto
